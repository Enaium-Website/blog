<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title/><link>https://blog.enaium.cn/en/</link><description>Recent content on</description><generator>Hugo</generator><language>en</language><lastBuildDate>Wed, 15 May 2024 17:50:03 +0800</lastBuildDate><atom:link href="https://blog.enaium.cn/en/index.xml" rel="self" type="application/rss+xml"/><item><title>Minecraft Fabric Modding Tutorial #8 Add a Weapon</title><link>https://blog.enaium.cn/en/post/2024-5-14-minecraft-fabric-modding-tutorial-%238-add-a-weapon/</link><pubDate>Wed, 15 May 2024 17:50:03 +0800</pubDate><guid>https://blog.enaium.cn/en/post/2024-5-14-minecraft-fabric-modding-tutorial-%238-add-a-weapon/</guid><description>Tool Material First, we need to create a enum class, and implement the ToolMaterial interface, so we can use it to create a new weapon.
package com.example.tool; import net.minecraft.block.Block; import net.minecraft.item.ToolMaterial; import net.minecraft.recipe.Ingredient; import net.minecraft.registry.tag.TagKey; public enum EndToolMaterial implements ToolMaterial { ; @Override public int getDurability() { return 0; } @Override public float getMiningSpeedMultiplier() { return 0; } @Override public float getAttackDamage() { return 0; } @Override public TagKey&amp;lt;Block&amp;gt; getInverseTag() { return null; } @Override public int getEnchantability() { return 0; } @Override public Ingredient getRepairIngredient() { return null; } } Next, we must complete the enum class EndToolMaterial by imitating the enum classnet.</description></item><item><title>2024 5 14 Minecraft Fabric Modding Tutorial #7 Add Armors</title><link>https://blog.enaium.cn/en/post/2024-5-14-minecraft-fabric-modding-tutorial-%237-add-armors/</link><pubDate>Tue, 14 May 2024 02:01:12 +0800</pubDate><guid>https://blog.enaium.cn/en/post/2024-5-14-minecraft-fabric-modding-tutorial-%237-add-armors/</guid><description>Armor Material First, we need to create a material class, and then we need to declare a new armor material.
public static final RegistryEntry&amp;lt;ArmorMaterial&amp;gt; END_HEART = EndArmorMaterial.register(&amp;#34;end_heart&amp;#34;, Util.make(new EnumMap&amp;lt;&amp;gt;(ArmorItem.Type.class), map -&amp;gt; { map.put(ArmorItem.Type.BOOTS, 4); map.put(ArmorItem.Type.LEGGINGS, 6); map.put(ArmorItem.Type.CHESTPLATE, 8); map.put(ArmorItem.Type.HELMET, 4); map.put(ArmorItem.Type.BODY, 11); }), 20, SoundEvents.ITEM_ARMOR_EQUIP_NETHERITE, 3.0f, 0.1f, () -&amp;gt; Ingredient.ofItems(Items.NETHERITE_INGOT)); private static RegistryEntry&amp;lt;ArmorMaterial&amp;gt; register(String id, EnumMap&amp;lt;ArmorItem.Type, Integer&amp;gt; defense, int enchantability, RegistryEntry&amp;lt;SoundEvent&amp;gt; equipSound, float toughness, float knockbackResistance, Supplier&amp;lt;Ingredient&amp;gt; repairIngredient) { List&amp;lt;ArmorMaterial.Layer&amp;gt; list = List.</description></item><item><title>Minecraft Fabric Modding Tutorial #6 Language Recipes Tooltip</title><link>https://blog.enaium.cn/en/post/2024-5-11-minecraft-fabric-modding-tutorial-%236-language-recipes-tooltip/</link><pubDate>Sat, 11 May 2024 21:05:53 +0800</pubDate><guid>https://blog.enaium.cn/en/post/2024-5-11-minecraft-fabric-modding-tutorial-%236-language-recipes-tooltip/</guid><description>Language We had added an item, an item group, and a block, but they do not have a name yet. Here, We can use a language file to provide a name for them.
We can create a language file en_us.json under the path assets/awesome/lang, it is an English language file.
{ &amp;#34;item.awesome.end_heart&amp;#34;: &amp;#34;End Heart&amp;#34;, &amp;#34;item.awesome.end_heart_block&amp;#34;: &amp;#34;End Heart Block&amp;#34;, &amp;#34;block.awesome.end_heart_block&amp;#34;: &amp;#34;End Heart Block&amp;#34;, &amp;#34;itemGroup.awesome.item_group&amp;#34;: &amp;#34;Awesome&amp;#34; } Recipes The recipe is used to craft an item, Here, We can configure the recipe of the item.</description></item><item><title>Minecraft Fabric Modding Tutorial #5 Add a Block</title><link>https://blog.enaium.cn/en/post/2024-5-10-minecraft-fabric-modding-tutorial-%235-add-a-block/</link><pubDate>Fri, 10 May 2024 23:11:31 +0800</pubDate><guid>https://blog.enaium.cn/en/post/2024-5-10-minecraft-fabric-modding-tutorial-%235-add-a-block/</guid><description>Register a Block It is similar to registering an item, first, we need to declare a block, but a block has a strength property which is the time required for the player to mine a block.
public static final Block END_HEART_BLOCK = new Block(Block.Settings.create().strength(4.0f)); Next, we need to register the block, similar to registering an item, we need to register the block in the onInitialize method.
public static final Block END_HEART_BLOCK = Registry.</description></item><item><title>Minecraft Fabric Modding Toturial #4 Add an Item</title><link>https://blog.enaium.cn/en/post/2024-5-3-minecraft-fabric-modding-toturial-%234-add-an-item/</link><pubDate>Fri, 03 May 2024 16:53:43 +0800</pubDate><guid>https://blog.enaium.cn/en/post/2024-5-3-minecraft-fabric-modding-toturial-%234-add-an-item/</guid><description>Register an Item First, we need to declare an item in the ExampleMod class.
+ public static final Item END_HEART = new Item(new Item.Settings()); + @Override public void onInitialize() { // This code runs as soon as Minecraft is in a mod-load-ready state. Next, register the item in the onInitialize method.
package com.example; import net.fabricmc.api.ModInitializer; import net.minecraft.item.Item; +import net.minecraft.registry.Registries; +import net.minecraft.registry.Registry; +import net.minecraft.util.Identifier; import org.slf4j.Logger; import org.slf4j.LoggerFactory; @@ -16,10 +19,6 @@ public class ExampleMod implements ModInitializer { @Override public void onInitialize() { - // This code runs as soon as Minecraft is in a mod-load-ready state.</description></item><item><title>Minecraft Fabric Modding Toturial #3 To Write Some Simple Code</title><link>https://blog.enaium.cn/en/post/2024-5-3-minecraft-fabric-modding-toturial-%233-to-write-some-simple-code/</link><pubDate>Fri, 03 May 2024 15:32:28 +0800</pubDate><guid>https://blog.enaium.cn/en/post/2024-5-3-minecraft-fabric-modding-toturial-%233-to-write-some-simple-code/</guid><description>Preface In the previous article, we have known the mod and project structure, in this article, we will write some simple code.
Modify the Mod Information First, we need delete some useless file.
Delete the client folder We have to modify other files after delete the client folder.
Delete the client in the gradle.build file, because we don&amp;rsquo;t need to split the client and server, so we can delete the loom block in the gradle.</description></item><item><title>Minecraft Fabric Modding Toturial #2 To Understand Mod and Porject</title><link>https://blog.enaium.cn/en/post/2024-5-3-minecraft-fabric-modding-toturial-%232-to-understand-mod-and-porject/</link><pubDate>Fri, 03 May 2024 03:33:38 +0800</pubDate><guid>https://blog.enaium.cn/en/post/2024-5-3-minecraft-fabric-modding-toturial-%232-to-understand-mod-and-porject/</guid><description>Preface In the previous article we have completed the development environment for fabric modding, in this article we will introduce some basic information about mod and project.
Directory Structure Click the Project button in the upper left corner, you can see the directory, then we expand all the folders in src.
├─client │ ├─java │ │ └─com │ │ └─example │ │ │ ExampleModClient.java │ │ │ │ │ └─mixin │ │ └─client │ │ ExampleClientMixin.</description></item><item><title>Minecraft Fabric Modding Toturial #1 Setup a Development Environment</title><link>https://blog.enaium.cn/en/post/2024-5-3-minecraft-fabric-modding-toturial-%231-setup-a-development-environment/</link><pubDate>Fri, 03 May 2024 02:21:18 +0800</pubDate><guid>https://blog.enaium.cn/en/post/2024-5-3-minecraft-fabric-modding-toturial-%231-setup-a-development-environment/</guid><description>Install JDK Since the latest(1.20.6) Minecraft only supports JDK21, so we need to install JDK21, here I choose to download Libreica OpenJDK 21.
Choose Full JDK and click the file with the suffix msi to download if you are using Windows, double-click to install after downloading.
Install Intellij IDEA Here I choose to download Intellij IDEA Community, choose the Community version.
Double-click to install after downloading if you are using Windows.</description></item><item><title>Contact</title><link>https://blog.enaium.cn/en/contact/</link><pubDate>Fri, 18 Nov 2022 15:37:34 +0800</pubDate><guid>https://blog.enaium.cn/en/contact/</guid><description>Contact GitHub BiliBili</description></item><item><title>About</title><link>https://blog.enaium.cn/en/about/</link><pubDate>Wed, 16 Nov 2022 09:24:55 +0800</pubDate><guid>https://blog.enaium.cn/en/about/</guid><description>About Generator:Hugo
UI:Bootstrap</description></item></channel></rss>